@model VendorDetailsViewModel
@{
    ViewData["Title"] = $"Invoices for {Model.vendor.Name}";
}
<div class="container">

    <div class="d-flex p-1">
        <div class="flex-fill p-2">
            <h4 class="float-end">
                <b>
                    <a asp-controller="Vendor" asp-action="GetVendorList"
                       asp-route-startingLetter="@Model.startingLetter" asp-route-endingLetter="@Model.endingLetter">
                        Return to Vendor List @(((Model.startingLetter != null && Model.endingLetter != null) ? $"({@Model.startingLetter} - {@Model.endingLetter})" : "(A - Z)"))
                    </a>
                </b>
            </h4>
        </div>
    </div>
    <div class="d-flex p-1">
        <div class="flex-fill p-2 flex-column">
            <div class="p-2 float-start"><h2><b>Address: </b>@Model.vendor.Address1 @Model.vendor.Address2</h2></div>
            @foreach (var paymentTerm in @Model.vendor.Invoices.Where(i => i.InvoiceId == Model.SelectedInvoiceId).FirstOrDefault().PaymentTerms)
            {
                if (paymentTerm.PaymentTermsId == Model.vendor.Invoices.Where(i => i.InvoiceId == Model.SelectedInvoiceId).FirstOrDefault().PaymentTermsId)
                {
                    <div class="p-2 float-end"><h2><b>Terms: @paymentTerm.DueDays Days</b></h2></div>
                }
            }
        </div>
    </div>
    </br>
    </br>
    <div class="d-flex p-1">
        <div class="flex-fill p-2 flex-column float-start col-sm-7">
            @await Component.InvokeAsync("InvoiceDetails", new {vendorId=@Model.vendor.VendorId, invoiceId=@Model.SelectedInvoiceId})
        </div>
        <div class="flex-fill p-2 flex-column float-start col-sm-5">
            @await Component.InvokeAsync("InvoiceLineItems", new {vendorId=@Model.vendor.VendorId, invoiceId=@Model.SelectedInvoiceId})
        </div>
    </div>
</div>